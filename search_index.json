[
["index.html", "Getting used to R, RStudio, and RMarkdown 1 Introduction", " Getting used to R, RStudio, and RMarkdown Chester Ismay 2016-08-13 1 Introduction This book was written using the bookdown R package from Yihui Xie. You can find different formats for the book by clicking on the save icon in the top pane of this book website. HTML is the preferred format but PDF and ePub formats are also available. This resource is designed to provide new users to R, RStudio, and RMarkdown with the introductory steps needed to begin their own reproducible research. Many screenshots and GIFs will be included, but if further clarification is needed on these or any other aspect of the book, please create a GitHub issue here or email me with a reference to the error/area where more guidance is necessary. "],
["whyR.html", "2 Why R?", " 2 Why R? If you are brand new to R and programming, you may be scared. You aren’t used to having to type commands to tell the computer what to do. You may be more used to using drop-down menus and other graphical user interfaces that allow you to pick what you’d like to do. So why are so many companies, colleges/universities, and individuals of all disciplinary backgrounds shifting towards using R? There are lots of answers to this question, but I believe the most important are: R is free. RStudio is free. One of the biggest perks about working with R and RStudio is that they are both provided free of charge to use. R is an open-source programming language that has grown tremendously in recent years with developers adding more functionality and packages on a daily basis. Where other more proprietary packages are sometimes stuck in the dark ages (the 1990s, for example) of development and can be incredibly expensive to purchase, R continues to be a free alternative that allows users of all levels to contribute. RStudio is a graphical user interface that allows one to write R code and view the results of that code in an easy way. It is also free to download and work with. Analyses done using R are reproducible. As many scientific fields push towards more reproducible analyses, the point-and-click proprietary systems actually serve as a hindrance to this process. If you need to rerun your analysis using these systems, you’ll need to carefully copy-and-paste your analysis into your text editors from potentially beginning to end. Anyone that has done this sort of copy-and-pasting knows that it is prone to errors and tedious. If you use the workflows described in this book, your analyses will be reproducible so you don’t need to worry about these copy-and-pasting issues. As you might guess have guessed by now, it would be much better to be able to update your code/data inputs and rerun all of your analysis. Reproducibility also helps you as a programmer since your greatest collaborator will probably be yourself a few months or years down the road. Instead of having to carefully write down all the steps you took to find the right drop-down menu option, your entire code is stored. Using R makes collaboration easier. This also helps you with collaboration since, as you will see later, you can share an RMarkdown file containing all of your analysis, documentation, commentary, and the code to others. This reduces the time to needed to work with others and reduces the likelihood of errors being made in following along with point-and-click analyses. Finding answers to questions is much simpler. If you have ever had an issue with software, you know how difficult it is to find answers to your questions. “How can I describe the process to someone else? Do I need to take screenshots?” R is a programming language and so it is much easier (after a bit of practice) to use Google or Stack Overflow to find answers to your questions. I frequently (almost on a daily basis) Google things like “How do I make a side-by-side boxplot in R coloring by a third variable?”. You’ll become better at working with R by reaching out to others for help and by answering questions that others have. Struggling through programming helps you learn. We all know that learning isn’t easy. Do you have trouble remembering how to follow a list of more than 10 steps or so? Do you find yourself going back over and over again because you can’t remember what step comes next in the process? This is extremely common especially if you haven’t done the procedure in awhile. The unfortunate thing is that our brain tricks us into picking the easy route. If you truly want to learn how to do something (like programming with R), you’ll need to feel frustrated at times. Any time you learn something you’ve been frustrated. (We tend to forget all the frustration and only think about where we currently are.) R still frustrates me from time to time, but I grow through practice. Hadley Wickham encapsulated this phenomenon nicely in the Prologue of the book “Hands-On Programming with R” (Grolemund 2014): As you learn to program, you are going to get frustrated. You are learning a new language, and it will take time to become fluent. But frustration is not just natural, it’s actually a positive sign that you should watch for. Frustration is your brain’s way of being lazy; it’s trying to get you to quit and go do something easy or fun. If you want to get physically fitter, you need to push your body even though it complains. If you want to get better at programming, you’ll need to push your brain. Recognize when you get frustrated and see it as a good thing: you’re now stretching yourself. Push yourself a little further every day, and you’ll soon be a confident programmer. Last updated: ## [1] &quot;Saturday, August 13, 2016 16:45:19 PDT&quot; References "],
["rstudiobasics.html", "3 R and RStudio Basics 3.1 What is R? 3.2 What is RStudio? 3.3 Installing R and RStudio 3.4 Working in RStudio", " 3 R and RStudio Basics 3.1 What is R? In Chapter 2, I discussed many of the reasons why you should be doing your analyses (especially those of the data type) using R. If you skipped over that chapter in the hopes of just hopping into learning about R, I request that you to go back to it and carefully read it over. As you begin working with R, it is especially important to review that introductory chapter. 3.1.1 R beginnings R was created by a group of statisticians who wanted an open-source alternative to the costly proprietary options. Being created by statisticians (instead of computer scientists) means that R has some quirky aspects to it that take a little bit of time to get used to. We’ll see that many packages have been developed to help with this and that you don’t need to have advanced degrees in Statistics to be able to work with R now. Getting back to the development of R… R was created by Ross Ihaka and Robert Gentleman in New Zealand at the University of Auckland. It is a spin-off of the S programming language and is named partly after the first names of its developers (as you can see in the emphasis above). The beginning ideas for creating R came in 1992 and the first version of R was released in 1994. You can find much more about the background of R and its features as well as its connections to the S language on its Wikipedia page. 3.1.2 R packages I first learned to use R while a graduate student at Northern Arizona University from Philip Turk in 2007. At the time, I never thought that R would have exploded in users as we have seen in the last few years before 2016. I never would have thought that students taking an introductory statistics course would be encouraged to learn to use R. In 2007, it was still largely a language used by statisticians to do analyses. Getting used to the syntax for producing plots and working with data was especially tricky for those with little to no programming experience. So what has changed since 2007 about learning R? I believe one of the biggest developments has been the creation of packages to make R easier to work with for newbies. Packages are created by users of R to increase the functionality of the base R installation. Packages created by Hadley Wickham and others recently have greatly expanded the capabilities of R, while also working to make beginning with R simpler. From the Wikipedia page referenced earlier, as of January 2016, there were around 7800 additional R packages available on common R repositories.1 Another great development is the graphical user interface called RStudio and the package developed by the those that work for RStudio, Inc. called rmarkdown. We will discuss rmarkdown (also referred to as RMarkdown) in a Chapter 4, and will now focus on discussing RStudio. 3.2 What is RStudio? 3.3 Installing R and RStudio Installing R and RStudio directions with screenshots 3.4 Working in RStudio Screenshots of RStudio frames? Last updated: ## [1] &quot;Saturday, August 13, 2016 16:45:19 PDT&quot; You’ll see how to download these packages via install.packages(&quot;dplyr&quot;) and load them into your current R working environment via library(&quot;dplyr&quot;), for example, in Chapter 5.↩ "],
["rmarkdown.html", "4 R Markdown", " 4 R Markdown Walk through the components of an R Markdown file Resource for Markdown: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet RMarkdown chunk options Help -&gt; Cheatsheets "],
["rmdanal.html", "5 Introductory R analysis using R Markdown", " 5 Introductory R analysis using R Markdown “File organization and naming are powerful weapons against chaos.” - Jenny Bryan Give an introduction into using R with periodic table dataset Mean, median, standard deviation, five-number summary, distribution Some content to cover: data structures (vectors, lists, data frames, matrices) indexing/subsetting functions (default arguments) Case matters in R! Why do some arguments require quotations and others don’t? "],
["references.html", "6 References", " 6 References "]
]
