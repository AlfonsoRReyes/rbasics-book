[
["index.html", "Getting used to R, RStudio, and RMarkdown 1 Introduction", " Getting used to R, RStudio, and RMarkdown Chester Ismay 2016-08-14 1 Introduction in the top pane of this book website. HTML is the preferred format but the ePub format is also available. Since there are animated GIFs included and PDFs don't handle GIFs natively, PDF format is not provided. --> This resource is designed to provide new users to R, RStudio, and RMarkdown with the introductory steps needed to begin their own reproducible research. A review of many of the common R errors encountered (and what they mean in laymen’s terms) is also provided. Many screenshots and GIFs will be included, but if further clarification is needed on these or any other aspect of the book, please create a GitHub issue here or email me with a reference to the error/area where more guidance is necessary. This book will evolve and be updated as needed based on feedback. Check the date at the beginning of this chapter to see when the book was last updated. In addition, each individual chapter shows the time of last update. "],
["whyR.html", "2 Why R?", " 2 Why R? If you are brand new to R and programming, you may be scared. You aren’t used to having to type commands to tell the computer what to do. You may be more used to using drop-down menus and other graphical user interfaces that allow you to pick what you’d like to do. So why are so many companies, colleges/universities, and individuals of all disciplinary backgrounds shifting towards using R? There are lots of answers to this question, but some of the most important for us now are: R is free. RStudio is free. One of the biggest perks about working with R and RStudio is that they are both provided free of charge to use. R is an open-source programming language that has grown tremendously in recent years with developers adding more functionality and packages on a daily basis. Where other more proprietary packages are sometimes stuck in the dark ages (the 1990s, for example) of development and can be incredibly expensive to purchase, R continues to be a free alternative that allows users of all levels to contribute. RStudio is a graphical user interface that allows one to write R code and view the results of that code in an easy way. It is also free to download and work with. Analyses done using R are reproducible. As many scientific fields push towards more reproducible analyses, the point-and-click proprietary systems actually serve as a hindrance to this process. If you need to re-run your analysis using these systems, you’ll need to carefully copy-and-paste your analysis and plots into your text editors from potentially beginning to end. Anyone that has done this sort of copy-and-pasting knows that it is prone to errors and incredibly tedious. If you use the workflows described in this book, your analyses will be reproducible so you don’t need to worry about these copy-and-pasting issues. As you might have guessed by now, it would be much better to be able to update your code/data inputs and re-run all of your analysis than to have to worry about manually moving your results from one program to another. Reproducibility also helps you as a programmer since your greatest collaborator will probably be yourself a few months or years down the road. Instead of having to carefully write down all the steps you took to find the right drop-down menu option, your entire code is stored. Using R makes collaboration easier. This also helps you with collaboration since, as you will see later, you can share an R Markdown file containing all of your analysis, documentation, commentary, and the code to others. This reduces the time to needed to work with others and reduces the likelihood of errors being made in following along with point-and-click analyses. The mantra here will be to Say No to Copy-And-Paste! both for your sanity and for the sake of science. Finding answers to questions is much simpler. If you have ever had an issue with software, you know how difficult it is to find answers to your questions. “How can I describe the process to someone else? Do I need to take screenshots? Do I really need to call IT and wait for hours for someone to respond?” R is a programming language and so it is much easier (after a bit of practice) to use Google or Stack Overflow to find answers to your questions. You’ll be amazed at how many other users have encountered the same sorts of errors you will see when you begin. I frequently (almost on a daily basis) Google things like “How do I make a side-by-side boxplot in R coloring by a third variable?”. You’ll become better at working with R by reaching out to others for help and by answering questions that others have. In addition, Chapter 6 describes many common errors and how you can fix them. Struggling through programming helps you learn. We all know that learning isn’t easy. Do you have trouble remembering how to follow a list of more than 10 steps or so? Do you find yourself going back over and over again because you can’t remember what step comes next in the process? This is extremely common especially if you haven’t done the procedure in awhile. Learning via following a procedure is easy in the short-term, but can be extremely frustrating to remember in the long-term. Programming (if done well) promotes long-term thinking to short-term fixes. One unfortunate thing that we frequently take for granted is that our brain tricks us into picking the easy route. If you truly want to learn how to do something (like programming with R), you’ll need to feel frustrated at times. Any time you learn something you’ve been frustrated. (We tend to forget all the frustration and only think about where we currently are.) R still frustrates me from time to time, but I grow through practice and I look forward to the challenges. Hadley Wickham encapsulated this phenomenon nicely in the Prologue of the book “Hands-On Programming with R” (Grolemund 2014): As you learn to program, you are going to get frustrated. You are learning a new language, and it will take time to become fluent. But frustration is not just natural, it’s actually a positive sign that you should watch for. Frustration is your brain’s way of being lazy; it’s trying to get you to quit and go do something easy or fun. If you want to get physically fitter, you need to push your body even though it complains. If you want to get better at programming, you’ll need to push your brain. Recognize when you get frustrated and see it as a good thing: you’re now stretching yourself. Push yourself a little further every day, and you’ll soon be a confident programmer. Last updated: ## [1] &quot;By Chester on Sunday, August 14, 2016 17:25:05 PDT&quot; References "],
["rstudiobasics.html", "3 R and RStudio Basics 3.1 What is R? 3.2 What is RStudio? 3.3 Working in RStudio Server 3.4 RStudio Layout", " 3 R and RStudio Basics 3.1 What is R? In Chapter 2, I discussed many of the reasons why you should be doing your analyses (especially those of the data type) using R. If you skipped over that chapter in the hopes of just hopping into learning about R, I request that you to go back to it and carefully read it over. As you begin working with R, it is especially important to review that introductory chapter from time to time. 3.1.1 R beginnings R was created by a group of statisticians who wanted an open-source alternative to the costly proprietary options. Being created by statisticians (instead of computer scientists) means that R has some quirky aspects to it that take a little bit of time to get used to. We’ll see that many packages have been developed to help with this and that you don’t need to have advanced degrees in Statistics to be able to work with R now. Getting back to the development of R… R was created by Ross Ihaka and Robert Gentleman in New Zealand at the University of Auckland. It is a spin-off of the S programming language and is named partly after the first names of its developers (as you can see in the emphasis above). The beginning ideas for creating R came in 1992 and the first version of R was released in 1994. You can find much more about the background of R and its features as well as its connections to the S language on its Wikipedia page. 3.1.2 R packages I first learned to use R while a graduate student at Northern Arizona University from Dr. Philip Turk in 2007. At the time, I never thought that R could have exploded in users as we have seen since 2011. I never would have thought that students taking an introductory statistics course would be encouraged to learn to use R. In 2007, it was still largely esoteric and tricky language used by statisticians to do analyses. Getting used to the syntax for producing plots and working with data was especially tricky for those with little to no programming experience. So what has changed since 2007 about learning R? I believe one of the biggest developments has been the creation of packages to make R easier to work with for newbies. Packages are created by users of R to increase the functionality of the base R installation. Packages created by Hadley Wickham and others recently have greatly expanded the capabilities of R, while also working to make beginning with R simpler. From the Wikipedia page referenced earlier, as of January 2016, there were around 7800 additional R packages available on common R repositories.1 Another great development is the graphical user interface called RStudio and the package developed by the those that work for RStudio, Inc. called rmarkdown. We will discuss rmarkdown (also referred to as R Markdown) in a Chapter 4, and will now focus on discussing RStudio. 3.2 What is RStudio? RStudio is a powerful, free, open-source integrated development environment for R. It began development in 2010 and its first beta release came in February 2011. It is available in two editions: RStudio Desktop and RStudio Server. This book will focus mostly on using the RStudio Server, but both versions are nearly identical to work with. You can find instructions linked below for downloading R and RStudio on Windows and Mac machines. If you are using RStudio Server, your professor and members of your organization’s IT department have done these steps for you. On the RStudio Server you log on using a web browser to an account sitting on the cloud. There are many advantages to using the RStudio Server for the beginning user including sharing of R projects to help with feedback and error resolution. Installation of software can also cause its own headaches and this is eliminated by using the RStudio Server. Note for advanced users: You can also install your very own RStudio Server for around $5 per month on Digital Ocean. Instructions to do so can be found from Dean Attali here and on the Digital Ocean site here. After you complete a few months of work with the RStudio Server, it is recommended that you download RStudio Desktop to your computer. The instructions to do so are below. 3.2.1 Installing R and RStudio Desktop It is worth noting that you can’t just install RStudio Desktop without installing R as RStudio needs to have R installed in order to run. A step-by-step guide to installing R and RStudio Desktop with screenshots can be found here for the Mac and here for a PC. Unless you plan to create PDF documents (which requires a multiple gigabyte download of \\(\\LaTeX\\)) you can skip some of the later steps of the installation. It is recommended that you select HTML as the Default Output Format for R Markdown. You’ll see more about this in Chapter 4. 3.3 Working in RStudio Server 3.3.1 Logging in and initial screen The RStudio Server provides a web-based way to run analyses in R. This means that you will only need an internet connection and a web browser to run your analyses. Your professor or administrator will provide you with a link to the web location of your RStudio Server. After entering the link, you’ll see a page that looks something like: Figure 3.1: Login page for RStudio Server After logging in with your username and password, you should see a layout similar to what follows. Figure 3.2: Initial page for RStudio Server For your own reference, a screenshot of RStudio Desktop looks like: Figure 3.3: Initial page for RStudio Desktop As you can see they are almost identical. This makes working between the two different RStudio set-ups painless. A discussion of what each of the three different RStudio panes (will soon be four panes) and their corresponding tabs will occur in Chapter 4. You’ll find that a lot of what follows also applies to RStudio Desktop (except for the Shared Projects feature), but it always recommended to create an RStudio project regardless of whether you are on the cloud or working locally. 3.3.2 Basic workflow A good habit to get into whenever you start a new project with R code is to create a new RStudio project to go along with it. RStudio project files have the extension .Rproj and store metadata that goes along with the documents you’ve saved and information about the R environment you are working in. More information about RStudio projects is available from RStudio, Inc. here. If you are sharing homework or lab assignments with your instructor, for example, it might make sense to create an RStudio project, share it with your instructor, and then create new folders for each lab. We will follow this example below. The GIF below shows you how to create a new RStudio project called initial and also your first R Markdown file. Note that you also may see a description about what version of R is running on your initial login like shown in the GIF below in the Console pane. Figure 3.4: Create a new RStudio project and an R Markdown file Now that we have our first_rmarkdown.Rmd file set up. You will an example of how to share this project with another user. This will enable you and collaborators (other students, your instructor, etc.) to work on the Rmd file at the same time. This is similar to working on a Google Doc at the same time as someone else. RStudio Server comes in a couple different formats and you’ll need to make sure you (or your IT administrator) have installed RStudio Server Pro to use the Shared Projects feature. You can find more information from RStudio, Inc. on this here. Below is an example GIF of sharing this initial.Rproj project file with another user of the RStudio Server. Figure 3.5: Share an RStudio project on RStudio Server Pro Both myself and bottk can now work together on this project. We can save files to the common folder where initial.Rproj resides and type our commentary and code into first_rmarkdown.Rmd or other files. In Chapter 4, you’ll see why it is recommended you work in R Markdown files and you’ll also begin to see some examples of how R works with R Markdown. 3.4 RStudio Layout You may be initially a little overwhelmed by all the different panes and tabs that are available in RStudio. You’ll soon learn to love this layout but, as with all things, it will take a little bit to get used to it. We will begin with the top left pane, proceed to the top right pane, then to the bottom left pane, and lastly to the bottom right pane. These panes can be customized but it is recommended for beginning users to keep things in this standard layout. 3.4.1 Code Editor / View Window Likely the pane where you will spend a majority of your time is in the top left. When you first login this pane isn’t there, but it was created when we made the first_rmarkdown.Rmd. This pane serves as a place to view the contents of files and objects in R. In the GIF below, you can see that we can change the text in this file and then save the file. Note that the tab that gives the filename will change its color from black to red and an asterisk will appear after the filename. This is to remind you that the file is not saved. You’ll need to get into the habit of saving files frequently. You can have multiple tabs open and view different files in this pane. You’ll also see that you can View datasets in this pane in Chapter ??. Figure 3.6: Editing an R Markdown file in RStudio It may not be clear what these additions are really doing just yet. You’ll be pressing the Knit HTML button near the top of the pane to put all of your text, code, and its output together. We aren’t quite there just yet though! 3.4.2 Environment / History The next pane includes by default an Environment tab and a History tab. To get a sense of what these tabs provide we’ll need to also use the bottom left pane and the Console tab. I’ll show you how to create multiple objects in R using the Console. Initially you will see that the Environment tab tells us that the “Environment is empty.” If you click on the History tab, you should also see a blank screen with a few icons. We won’t go over using all of these buttons here, but you are encouraged to hover over them and click on them to get a sense for what they do. As I enter code into the Console watch to see how the Environment and History tabs change. Figure 3.7: Observe the Environment and History tabs based on Console input You can think of the Console as a place to play around. It is your R sandbox. You can test your code to make sure it is working and then copy that text into your Rmd file into a chunk after you are satisfied with it. We’ll see more examples of this in the chapters to come. Note that, by default, when you enter the name of an object into the console like I did with sum_1_2 it displays the result. You’ve also been shown what is called the assignment operator denoted by &lt;-. You can read this as putting the contents of the right-hand-side into an object named whatever appears on the left-hand-side. For example, num1 is the name of an object that stores the value 7. A powerful feature of the R language has been introduced in the sum_1_2 &lt;- sum(num1, num2) line. sum is a function. Functions are denoted by their name and then a parenthesis, their arguments separated by commas, and then a closing parenthesis. You’ll see many examples of these going forward. Of course, we’ll be using R for more than just a basic calculator shown here but this should give you a good idea of what the Environment and History tabs store. 3.4.3 Console You’ll frequently use the Console as a way to check your work or thoughts on how to solve a problem using R. Before RStudio came around, most users of R just had a window like the Console provides where they entered their commands and then looked at the results in different windows. We will see that the Console and the Code Editor/View Window will allow us to store all of our code in a file and then “run” that code through the Console to check that it works. The example GIF below shows how this may be done. Figure 3.8: Showing the Console interacting with an R Markdown document R chunk Rules for naming objects It is good practice to get in the habit of naming variables corresponding to what they actually represent. If you are dividing two different sums of numbers, you might want to choose a name like ratio_of_sums to refer to that object. R has a couple restrictions on what can be included in the name of R objects: Object names cannot begin with a number. Object names cannot contain symbols used for mathematics or to denote other operations native to R. These symbols include $, @, !, ^, +, -, /, and *. Another important property of R is that is case-sensitive. You’ll see what this means in the GIF below that also includes examples of invalid names of objects. Note that we will continue to work inside the R chunk as we did in the last GIF. You’ll see that these code chunks provide a nice way to keep track of our important analyses. Figure 3.9: Invalid object names and case sensitivity in R You may have notice that R will do some checks and alert you to potential errors by placing a red X to the left of the line of code with an error. It won’t catch all errors, but this can be helpful. Not also that Name, name, and nAme refer to three different values. It’s also a good idea to not call objects the names of functions that are built into R. You may want to call the addition of two numbers sum and R will allow this, but it is HIGHLY recommended that you create more descriptive names and not choose to name objects the same as common R functions. Something like sum_densities is better and less likely to be the name of a function. 3.4.4 The help function (?) Of course, you won’t know what all of the names of built-in functions are until you practice, but it is something to think about. If you are ever wondering if a function is built-in or is in a package you have included, you can use the ? function in the Console to check. Some examples are shown below as a GIF. Figure 3.10: Using the ? function to look up help on an R function 3.4.5 The bottom right pane The bottom right pane in RStudio contains the most tabs by default and is a useful place to view a variety of miscellaneous information about your RStudio project and its files. Files The leftmost tab here shows the file and folder structure. This shows you where the files are stored, what they are called, and any folders that may exist in your project folder. This can be thought of as similar to going to My Computer on a PC or opening Finder on a PC. Similarly, this gives the file and directory structure either on the cloud for RStudio Server or on your local machine for RStudio Desktop. Plots / Viewer You’ll see clearer examples of what the Plots and Viewer tabs provide in Chapter 4. As you likely guessed Plots will show you the resulting graphs/figures that your R code has generated. The Viewer tab can show you the resulting HTML file created from an R Markdown Knit. Packages You can get a sense for what packages have been downloaded to your computer/your cloud server by clicking on the Packages tab. You can also see which packages are loaded into the current working environment by looking to see if a check-mark exists next to the package name. Note that you may not have all of the packages loaded onto your machine that I do below in the GIF. That’s OK. This is just an example of what you may expect. Figure 3.11: Installed packages and whether or not they are loaded currently You’ll also notice a Description of the package as well as the Version number here. Packages are frequently updated and improved so this is a way to check to see if you have the most up-to-date version of a package. Remember that this is likely taken care of for you if you are on an RStudio Server installation. If you are on RStudio Desktop, you might find the Install and Update buttons useful for downloading new packages or updating currently installed ones. Help We also saw an example of using the Help tab when we invoked the ? function. This will show you documentation on R functions, datasets, and packages. If you see code that you aren’t really sure about, it is often a good go-to to enter a question mark followed by the name and see if the built-in documentation can help you out. Last updated: ## [1] &quot;By Chester on Sunday, August 14, 2016 17:25:06 PDT&quot; You’ll see how to download these packages via install.packages(&quot;dplyr&quot;) and load them into your current R working environment via library(&quot;dplyr&quot;), for example, in Chapter 5.↩ "],
["rmarkdown.html", "4 R Markdown", " 4 R Markdown Walk through the components of an R Markdown file Resource for Markdown: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet R Markdown chunk options Help -&gt; Cheatsheets Last updated: ## [1] &quot;By Chester on Sunday, August 14, 2016 17:25:06 PDT&quot; "],
["rmdanal.html", "5 Introductory R Analysis using R Markdown", " 5 Introductory R Analysis using R Markdown A beginning workflow “File organization and naming are powerful weapons against chaos.” - Jenny Bryan Give an introduction into using R with periodic table dataset Mean, median, standard deviation, five-number summary, distribution Some content to cover: data structures (vectors, lists, data frames, matrices) indexing/subsetting functions (default arguments) Case matters in R! Why do some arguments require quotations and others don’t? R Markdown templates Last updated: ## [1] &quot;By Chester on Sunday, August 14, 2016 17:25:06 PDT&quot; "],
["errors.html", "6 Deciphering Common R Errors", " 6 Deciphering Common R Errors https://github.com/noamross/zero-dependency-problems/blob/master/misc/stack-overflow-common-r-errors.md http://blog.revolutionanalytics.com/2015/03/the-most-common-r-error-messages.html Last updated: ## [1] &quot;By Chester on Sunday, August 14, 2016 17:25:06 PDT&quot; "],
["references.html", "7 References", " 7 References "]
]
